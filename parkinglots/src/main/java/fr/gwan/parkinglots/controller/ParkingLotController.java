/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package fr.gwan.parkinglots.controller;

import fr.gwan.parkinglots.api.model.ParkingSlot;
import fr.gwan.parkinglots.api.model.Payment;
import fr.gwan.parkinglots.api.model.Vehicle;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-08-09T18:54:26.285+02:00")

@Api(value = "parkingLot", description = "The parking lot API")
public interface ParkingLotController {

    Logger log = LoggerFactory.getLogger(ParkingLotController.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Request exit for a vehicle", nickname = "parkingLotParkingLotRefVehicleLicensePlateDelete", notes = "Request parking lot exit for a parked vehicle. The vehicle has until PricingPolicy.exitTimeout seconds after payment for this request to be accepted", response = Payment.class, tags={ "Vehicle", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Payment computed successfully", response = Payment.class),
        @ApiResponse(code = 403, message = "Payment required before exit"),
        @ApiResponse(code = 404, message = "Vehicle or parking lot not found"),
        @ApiResponse(code = 408, message = "Exit timeout. Need to request a new price and pay again") })
    @RequestMapping(value = "/parkingLot/{parkingLotRef}/vehicle/{licensePlate}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<Payment> parkingLotParkingLotRefVehicleLicensePlateDelete(@ApiParam(value = "Ref of the vehicle parking lot.",required=true) @PathVariable("parkingLotRef") String parkingLotRef,@ApiParam(value = "Vehicle license plate.",required=true) @PathVariable("licensePlate") String licensePlate) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"price\" : 25.5,  \"nbHours\" : 10.5,  \"pricingPolicy\" : {    \"20kwPricingPolicy\" : \"10.5 * h + 20\",    \"50kwPricingPolicy\" : \"12 * h * h + 2\",    \"sedanPricingPolicy\" : \"10 * h\",    \"paymentTimeout\" : 300,    \"exitTimeout\" : 600  }}", Payment.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ParkingLotController interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Request payment for a vehicle", nickname = "parkingLotParkingLotRefVehicleLicensePlatePaymentGet", notes = "Request the payment price for a parked vehicle.", response = Payment.class, tags={ "Vehicle", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Payment computed successfully", response = Payment.class),
        @ApiResponse(code = 404, message = "Vehicle or parking lot not found") })
    @RequestMapping(value = "/parkingLot/{parkingLotRef}/vehicle/{licensePlate}/payment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<Payment> parkingLotParkingLotRefVehicleLicensePlatePaymentGet(@ApiParam(value = "Ref of the vehicle parking lot.",required=true) @PathVariable("parkingLotRef") String parkingLotRef,@ApiParam(value = "Vehicle license plate.",required=true) @PathVariable("licensePlate") String licensePlate) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"price\" : 25.5,  \"nbHours\" : 10.5,  \"pricingPolicy\" : {    \"20kwPricingPolicy\" : \"10.5 * h + 20\",    \"50kwPricingPolicy\" : \"12 * h * h + 2\",    \"sedanPricingPolicy\" : \"10 * h\",    \"paymentTimeout\" : 300,    \"exitTimeout\" : 600  }}", Payment.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ParkingLotController interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Report payment for a vehicle", nickname = "parkingLotParkingLotRefVehicleLicensePlatePaymentPost", notes = "Report payment for a parked vehicle. The vehicle has until PricingPolicy.paymentTimeout seconds after price computation for this request to be accepted", tags={ "Vehicle", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Payment processed successfully"),
        @ApiResponse(code = 404, message = "Vehicle or parking lot not found"),
        @ApiResponse(code = 408, message = "Payment timeout. Need to request a new price") })
    @RequestMapping(value = "/parkingLot/{parkingLotRef}/vehicle/{licensePlate}/payment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> parkingLotParkingLotRefVehicleLicensePlatePaymentPost(@ApiParam(value = "Ref of the vehicle parking lot.",required=true) @PathVariable("parkingLotRef") String parkingLotRef,@ApiParam(value = "Vehicle license plate.",required=true) @PathVariable("licensePlate") String licensePlate) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ParkingLotController interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Enter a parking lot", nickname = "parkingLotParkingLotRefVehiclePost", notes = "Enter an existing parking lot with a vehicle.", response = ParkingSlot.class, tags={ "Vehicle", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Parking lot entered successfully. Vehicle must access the returned parking slot", response = ParkingSlot.class) })
    @RequestMapping(value = "/parkingLot/{parkingLotRef}/vehicle",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ParkingSlot> parkingLotParkingLotRefVehiclePost(@ApiParam(value = "Ref of the parking lot to enter.",required=true) @PathVariable("parkingLotRef") String parkingLotRef,@ApiParam(value = "Information about the vehicle." ,required=true )  @Valid @RequestBody Vehicle vehicle) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"name\" : \"Test parking slot 1\",  \"parkingSlotType\" : \"PARKING_SLOT_50KW\",  \"licensePlateParkedVehicle\" : \"BV-765-CS\",  \"parkTime\" : \"2019-08-09T16:52:31.746+0000\"}", ParkingSlot.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ParkingLotController interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
