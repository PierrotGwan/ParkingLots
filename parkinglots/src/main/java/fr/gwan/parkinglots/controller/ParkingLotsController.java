/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package fr.gwan.parkinglots.controller;

import fr.gwan.parkinglots.api.model.ParkingLot;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-08-06T08:00:43.530+02:00")

@Api(value = "admin", description = "the admin API")
@Controller
public class ParkingLotsController {

    Logger log = LoggerFactory.getLogger(ParkingLotsController.class);

    private final ObjectMapper objectMapper;

    private final HttpServletRequest request;

    @org.springframework.beans.factory.annotation.Autowired
    public ParkingLotsController(ObjectMapper objectMapper, HttpServletRequest request) {
        this.objectMapper = objectMapper;
        this.request = request;
    }

    public Optional<ObjectMapper> getObjectMapper() {
        return Optional.ofNullable(objectMapper);
    }

    public Optional<HttpServletRequest> getRequest() {
        return Optional.ofNullable(request);
    }

    public Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    
    @ApiOperation(value = "Parking lot list retrieval", nickname = "adminParkingLotsGet", notes = "Retrieves the list of existing parking lots.", response = ParkingLot.class, responseContainer = "List", tags={ "ParkingLot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Parking lots retrieved successfully.", response = ParkingLot.class, responseContainer = "List") })
    @RequestMapping(value = "/admin/parkingLots",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    public ResponseEntity<List<ParkingLot>> adminParkingLotsGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
//                try {
//                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"x-regga-type\" : \"sniplet\",  \"id\" : \"binder-configuration-getall\",  \"title\" : \"Binder configurations retrieval\",  \"requestSniplet\" : {    \"data\" : \"[ { \\"ref\\": \\"4b689889-c6e3-465a-85e2-7b6d346e2c11\\", \\"deviceEUIList\\": \\"70B3D53260001A75,70B3D53260001A76,70B3D53260001A77\\", \\"callbackURL\\": \\"https://targetpushserver/listener\\" } ]\"  }} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
//                } catch (IOException e) {
//                    log.error("Couldn't serialize response for content type application/json", e);
//                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
//                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AdminApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Parking lot deletion", nickname = "adminParkingLotsParkingLotRefDelete", notes = "Deletes the parking lot corresponding to the provided ref. The parking lot must be empty (i.e. no vehicle parked there)", tags={ "ParkingLot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Parking lot deleted successfully.") })
    @RequestMapping(value = "/admin/parkingLots/{parkingLotRef}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    public ResponseEntity<Void> adminParkingLotsParkingLotRefDelete(@ApiParam(value = "Ref of the parking lot to delete.",required=true) @PathVariable("parkingLotRef") String parkingLotRef) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AdminApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Parking lot retrieval", nickname = "adminParkingLotsParkingLotRefGet", notes = "Retrieves the parking lot corresponding to the provided ref.", response = ParkingLot.class, tags={ "ParkingLot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Parking lot retrieved successfully.", response = ParkingLot.class) })
    @RequestMapping(value = "/admin/parkingLots/{parkingLotRef}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    public ResponseEntity<ParkingLot> adminParkingLotsParkingLotRefGet(@ApiParam(value = "Ref of the parking lot to retrieve.",required=true) @PathVariable("parkingLotRef") String parkingLotRef) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
//                try {
//                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"x-regga-type\" : \"sniplet\",  \"id\" : \"binder-configuration-get\",  \"title\" : \"Binder configuration retrieval\",  \"requestSniplet\" : {    \"headers\" : {      \"Authorization\" : \"Bearer <subscriber_token>\"    },    \"uri\" : \"/binderConfigs/4b689889-c6e3-465a-85e2-7b6d346e2c11\"  },  \"data\" : \"{ \\"ref\\": \\"4b689889-c6e3-465a-85e2-7b6d346e2c11\\", \\"deviceEUIList\\": \\"70B3D53260001A75,70B3D53260001A76,70B3D53260001A77\\", \\"callbackURL\\": \\"https://targetpushserver/listener\\" }\"} ]", ParkingLot.class), HttpStatus.NOT_IMPLEMENTED);
//                } catch (IOException e) {
//                    log.error("Couldn't serialize response for content type application/json", e);
//                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
//                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AdminApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Create a parking lot", nickname = "adminParkingLotsPost", notes = "Creates a new parking lot for later vehicle management.", tags={ "ParkingLot", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Parking lot created successfully.") })
    @RequestMapping(value = "/admin/parkingLots",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    public ResponseEntity<Void> adminParkingLotsPost(@ApiParam(value = "Contents of the new parking lot." ,required=true )  @Valid @RequestBody ParkingLot parkingLot) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AdminApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
