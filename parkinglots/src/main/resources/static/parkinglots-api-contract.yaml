swagger: '2.0'
info:
  version: 1.0.0
  title: Gwan parking lots API
  description: API providing toll parking for sedan / electric vehicles.
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: ParkingLotsAdministration
    description: Parking lot operations allow administrators to manage the parking lots globally.
  - name: ParkingLotsVehicle
    description: Vehicle operations allow vehicles to enter / exit a parking lot.
paths:
  /admin/parkingLots:
    post:
      summary: Create a parking lot
      description: Creates a new parking lot for later vehicle management.
      parameters:
        - in: body
          name: parkingLot
          description: Contents of the new parking lot.
          required: true
          schema:
            $ref: '#/definitions/ParkingLot'
      responses:
        '201':
          description: Parking lot created successfully.
          schema:
            $ref: '#/definitions/ParkingLot'
        '400':
          description: Provided parking lot check failed.
      tags:
        - ParkingLotsAdministration       
    get:
      summary: Parking lot list retrieval
      description: Retrieves the list of existing parking lots.
      tags:
        - ParkingLotsAdministration
      responses:
        '200':
          description: Parking lots retrieved successfully.
          schema:
            type: array
            items:
              $ref: '#/definitions/ParkingLot'
  /admin/parkingLots/{parkingLotRef}:
    get:
      summary: Parking lot retrieval
      description: Retrieves the parking lot corresponding to the provided ref.
      parameters:
        - in: path
          name: parkingLotRef
          description: Ref of the parking lot to retrieve.
          type: string
          required: true
      tags:
        - ParkingLotsAdministration
      responses:
        '200':
          description: Parking lot retrieved successfully.
          schema:
            $ref: '#/definitions/ParkingLot'
        '404':
          description: Parking lot not found.
    delete:
      summary: Parking lot deletion
      description: Deletes the parking lot corresponding to the provided ref. The parking lot must be empty (i.e. no vehicle parked there)
      parameters:
        - in: path
          name: parkingLotRef
          description: Ref of the parking lot to delete.
          type: string
          required: true
      tags:
        - ParkingLotsAdministration
      responses:
        '204':
          description: Parking lot deleted successfully.
        '404':
          description: Parking lot not found.
  /parkingLots/{parkingLotRef}/vehicle:
    post:
      summary: Enter a parking lot
      description: Enter an existing parking lot with a vehicle.
      parameters:
        - in: path
          name: parkingLotRef
          description: Ref of the parking lot to enter.
          type: string
          required: true
        - in: body
          name: vehicle
          description: Information about the vehicle.
          required: true
          schema:
            $ref: '#/definitions/Vehicle'
      responses:
        '201':
          description: Parking lot entered successfully. Vehicle must access the returned parking slot
          schema:
            $ref: '#/definitions/ParkingSlot'
        '404':
          description: Parking lot not found or no parking slot left
      tags:
        - ParkingLotsVehicle       
  /parkingLots/{parkingLotRef}/vehicle/{licensePlate}/payment:
    get:
      summary: Request payment for a vehicle
      description: Request the payment price for a parked vehicle.
      parameters:
        - in: path
          name: parkingLotRef
          description: Ref of the vehicle parking lot.
          type: string
          required: true
        - in: path
          name: licensePlate
          description: Vehicle license plate.
          type: string
          required: true
      responses:
        '200':
          description: Payment computed successfully
          schema:
            $ref: '#/definitions/Payment'
        '404':
          description: Vehicle or parking lot not found
      tags:
        - ParkingLotsVehicle       
    post:
      summary: Report payment for a vehicle
      description: Report payment for a parked vehicle. The vehicle has until PricingPolicy.paymentTimeout seconds after price computation for this request to be accepted
      parameters:
        - in: path
          name: parkingLotRef
          description: Ref of the vehicle parking lot.
          type: string
          required: true
        - in: path
          name: licensePlate
          description: Vehicle license plate.
          type: string
          required: true
      responses:
        '201':
          description: Payment processed successfully
        '404':
          description: Vehicle or parking lot not found
        '408':
          description: Payment timeout. Need to request a new price
      tags:
        - ParkingLotsVehicle       
  /parkingLots/{parkingLotRef}/vehicle/{licensePlate}:
    delete:
      summary: Request exit for a vehicle
      description: Request parking lot exit for a parked vehicle. The vehicle has until PricingPolicy.exitTimeout seconds after payment for this request to be accepted 
      parameters:
        - in: path
          name: parkingLotRef
          description: Ref of the vehicle parking lot.
          type: string
          required: true
        - in: path
          name: licensePlate
          description: Vehicle license plate.
          type: string
          required: true
      responses:
        '204':
          description: Vehicle deleted successfully
        '403':
          description: Payment required before exit
        '404':
          description: Vehicle or parking lot not found
        '408':
          description: Exit timeout. Need to request a new price and pay again
      tags:
        - ParkingLotsVehicle       
definitions:
  ParkingLot:
    description: Resource representing a parking lot. It must contain a list of parking slots
    properties:
      ref:
        type: string
        description: Ref of the parking lot. Generated by the system upon creation.
      name:
        type: string
        description: Name of the parking lot
      parkingSlots:
        type: array
        description: List of parking slots.
        items:
          $ref: '#/definitions/ParkingSlot'
      pricingPolicy:
        description: Parking lot pricing policy.
        $ref: '#/definitions/PricingPolicy'
    required:
      - name
      - parkingSlots
      - pricingPolicy
    example:
      ref: 48548c27-48b7-4d57-b3e3-781ddc6c20c6 
      name: Test parking lot
      parkingSlots:
        - name: Test parking slot 2
          parkingSlotType: PARKING_SLOT_50KW
        - name: Test parking slot 0
          parkingSlotType: PARKING_SLOT_SEDAN
        - name: Test parking slot 1
          parkingSlotType: PARKING_SLOT_20KW
        - name: Test parking slot 12
          parkingSlotType: PARKING_SLOT_SEDAN
        - name: Test parking slot 14
          parkingSlotType: PARKING_SLOT_50KW
        - name: Test parking slot 3
          parkingSlotType: PARKING_SLOT_SEDAN
        - name: Test parking slot 4
          parkingSlotType: PARKING_SLOT_20KW
        - name: Test parking slot 5
          parkingSlotType: PARKING_SLOT_50KW
        - name: Test parking slot 6
          parkingSlotType: PARKING_SLOT_SEDAN
        - name: Test parking slot 7
          parkingSlotType: PARKING_SLOT_20KW
        - name: Test parking slot 8
          parkingSlotType: PARKING_SLOT_50KW
        - name: Test parking slot 9
          parkingSlotType: PARKING_SLOT_SEDAN
        - name: Test parking slot 10
          parkingSlotType: PARKING_SLOT_20KW
        - name: Test parking slot 11
          parkingSlotType: PARKING_SLOT_50KW
        - name: Test parking slot 13
          parkingSlotType: PARKING_SLOT_20KW
      pricingPolicy:
        20kwPricingPolicy: 10.5 * h + 20
        50kwPricingPolicy: 12 * h * h + 2
        sedanPricingPolicy: 10 * h
        paymentTimeout: 300
        exitTimeout: 600
  PricingPolicy:
    description: 'Resource representing the pricing policy for a parking lot. The three properties are equation for computing the price based on the number of hours (h). Thus, the string is verified upon insertion, and the only allowed string parts are: h, *, +, (, ) and any number.'
    properties:
      sedanPricingPolicy:
        type: string
        description: Pricing policy for sedan cars
      20kwPricingPolicy:
        type: string
        description: Pricing policy for 20kw electric cars
      50kwPricingPolicy:
        type: string
        description: Pricing policy for 20kw electric cars
      paymentTimeout:
        type: integer
        description: Maximum number of seconds allowed after pricing computation before payment
      exitTimeout:
        type: integer
        description: Maximum number of seconds allowed after payment before exit
    required:
      - sedanPricingPolicy
      - 20kwPricingPolicy
      - 50kwPricingPolicy
      - paymentTimeout
      - exitTimeout
    example:
      20kwPricingPolicy: 10.5 * h + 20
      50kwPricingPolicy: 12 * h * h + 2
      sedanPricingPolicy: 10 * h
      paymentTimeout: 300
      exitTimeout: 600
  ParkingSlot:
    description: Resource representing a parking slot in a parking lot. It can accept either sedan cars, 20kw electric cars or 50kw electric cars.
    properties:
      name:
        type: string
        description: Name of the parking slot. It must be unique within the parking lot.
      parkingSlotType:
        description: Type of this parking slot.
        $ref: '#/definitions/ParkingSlotType'
      licensePlateParkedVehicle:
        type: string
        description: License plate of the car parked on this slot. It must be null when creating a parking lot.
      parkTime:
        type: string
        format: date-time
        description: Time of parking for the car currently on this slot. It must be null when creating a parking lot.
    required:
      - name
      - parkingSlotType
    example:
      name: Test parking slot 1
      parkingSlotType: PARKING_SLOT_50KW
      licensePlateParkedVehicle: BV-765-CS
      parkTime: 2019-08-09T16:52:31.746Z
  ParkingSlotType:
    type: string
    description: 'Type of parking slot. Possible values are ''PARKING_SLOT_SEDAN’ (parking slot for sedan cars), ‘PARKING_SLOT_20KW’ (parking slot for 20kw electric cars) and ''PARKING_SLOT_50KW’ (parking slot for 50kw electric cars).'
    enum:
      - PARKING_SLOT_SEDAN
      - PARKING_SLOT_20KW
      - PARKING_SLOT_50KW
    example:
      PARKING_SLOT_50KW
  Vehicle:
    description: Resource representing a vehicle. It can be either a sedan car, 20kw electric car or 50kw electric car.
    properties:
      licensePlate:
        type: string
        description: License plate of the car parked on this slot. It must be null when creating a parking lot.
      neededParkingSlotType:
        description: Type of this parking slot needed by this vehicle.
        $ref: '#/definitions/ParkingSlotType'
    required:  
      - licensePlate
      - neededParkingSlotType
    example:
      licensePlate: BV-765-CS
      neededParkingSlotType: PARKING_SLOT_SEDAN
  Payment:
    description: Resource representing a payment for a vehicle.
    properties:
      price:
        type: number
        description: Price for the parking until now.
      nbHours:
        type: number
        description: Time spent on the parking until now.
      pricingPolicy:
        description: Parking lot pricing policy.
        $ref: '#/definitions/PricingPolicy'
    required:  
      - price
      - nbHours
      - pricingPolicy
    example:
      price: 25.50
      nbHours: 10.5
      pricingPolicy:
        20kwPricingPolicy: 10.5 * h + 20
        50kwPricingPolicy: 12 * h * h + 2
        sedanPricingPolicy: 10 * h
        paymentTimeout: 300
        exitTimeout: 600

